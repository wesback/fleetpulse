---
# Docker Compose configuration for FleetPulse MCP Server
# This file provides multiple deployment options for the MCP server

services:
  # Option 1: MCP Server with local backend
  mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
      args:
        USER_ID: ${USER_ID:-1000}
        GROUP_ID: ${GROUP_ID:-1000}
    container_name: fleetpulse-mcp
    ports:
      - "${MCP_PORT:-8001}:8001"
    restart: unless-stopped
    environment:
      # Backend connection
      - FLEETPULSE_BACKEND_URL=${FLEETPULSE_BACKEND_URL:-http://backend:8000}
      
      # MCP server settings
      - MCP_PORT=8001
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30.0}
      - MAX_RETRIES=${MAX_RETRIES:-3}
      
      # HTTP client settings
      - HTTPX_MAX_CONNECTIONS=${HTTPX_MAX_CONNECTIONS:-100}
      - HTTPX_MAX_KEEPALIVE_CONNECTIONS=${HTTPX_MAX_KEEPALIVE_CONNECTIONS:-20}
      
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME:-fleetpulse-mcp}
      - OTEL_SERVICE_VERSION=${OTEL_SERVICE_VERSION:-1.0.0}
      - OTEL_ENVIRONMENT=${OTEL_ENVIRONMENT:-development}
      - OTEL_ENABLE_TELEMETRY=${OTEL_ENABLE_TELEMETRY:-true}
      - OTEL_EXPORTER_TYPE=${OTEL_EXPORTER_TYPE:-console}
      - OTEL_TRACE_SAMPLE_RATE=${OTEL_TRACE_SAMPLE_RATE:-1.0}
      
      # Jaeger configuration (when OTEL_EXPORTER_TYPE=jaeger)
      - OTEL_EXPORTER_JAEGER_ENDPOINT=${OTEL_EXPORTER_JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      
      # OTLP configuration (when OTEL_EXPORTER_TYPE=otlp)
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fleetpulse
    depends_on:
      - backend

  # FleetPulse Backend (optional - enable if you need a local backend)
  backend:
    image: wesback/fleetpulse-backend:latest
    container_name: fleetpulse-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - fleetpulse_data:/data
    environment:
      - FLEETPULSE_DATA_DIR=/data
      - DEPLOYMENT_MODE=${DEPLOYMENT_MODE:-uvicorn}
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
      
      # OpenTelemetry configuration for backend
      - OTEL_SERVICE_NAME=fleetpulse-backend
      - OTEL_SERVICE_VERSION=1.0.0
      - OTEL_ENVIRONMENT=${OTEL_ENVIRONMENT:-development}
      - OTEL_ENABLE_TELEMETRY=${OTEL_ENABLE_TELEMETRY:-true}
      - OTEL_EXPORTER_TYPE=${OTEL_EXPORTER_TYPE:-console}
      - OTEL_TRACE_SAMPLE_RATE=${OTEL_TRACE_SAMPLE_RATE:-1.0}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fleetpulse
    profiles:
      - backend  # Use profile to optionally enable backend

  # Jaeger (optional - for distributed tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fleetpulse-jaeger
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"  # Jaeger UI
      - "14268:14268"  # Accept jaeger.thrift over HTTP
      - "6831:6831/udp"  # Accept jaeger.thrift over UDP
      - "6832:6832/udp"  # Accept jaeger.thrift over UDP (compact)
      - "5778:5778"     # Serve configs
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    restart: unless-stopped
    networks:
      - fleetpulse
    profiles:
      - observability  # Use profile to optionally enable observability

  # OpenTelemetry Collector (optional - for advanced telemetry)
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: fleetpulse-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus exporter metrics
    depends_on:
      - jaeger
    restart: unless-stopped
    networks:
      - fleetpulse
    profiles:
      - observability  # Use profile to optionally enable observability

volumes:
  fleetpulse_data:
    driver: local

networks:
  fleetpulse:
    driver: bridge

# Usage Examples:
#
# 1. MCP server only (requires external backend):
#    docker-compose up mcp
#
# 2. MCP server with local backend:
#    docker-compose --profile backend up
#
# 3. Full stack with observability:
#    docker-compose --profile backend --profile observability up
#
# 4. Connect to external backend:
#    FLEETPULSE_BACKEND_URL=http://your-backend:8000 docker-compose up mcp
#
# 5. Production deployment:
#    docker-compose --profile backend -f docker-compose.yml -f docker-compose.prod.yml up -d
